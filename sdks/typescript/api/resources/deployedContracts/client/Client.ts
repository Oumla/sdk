// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as OumlaSdkApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace DeployedContracts {
    export interface Options {
        environment?: core.Supplier<environments.OumlaSdkApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey?: string;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

/**
 * Deployed contract management
 */
export class DeployedContracts {
    protected readonly _options: DeployedContracts.Options;

    constructor(_options: DeployedContracts.Options) {
        this._options = _options;
    }

    /**
     * Retrieve a paginated list of deployed contracts
     *
     * @param {OumlaSdkApi.GetDeployedContractsRequest} request
     * @param {DeployedContracts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedContracts.getDeployedContracts({
     *         skip: 1,
     *         take: 1,
     *         contractAddress: "contractAddress",
     *         network: "BTC",
     *         contractTemplateId: "contractTemplateId"
     *     })
     */
    public getDeployedContracts(
        request: OumlaSdkApi.GetDeployedContractsRequest = {},
        requestOptions?: DeployedContracts.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.PaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getDeployedContracts(request, requestOptions));
    }

    private async __getDeployedContracts(
        request: OumlaSdkApi.GetDeployedContractsRequest = {},
        requestOptions?: DeployedContracts.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.PaginatedResponse>> {
        const { skip, take, contractAddress, network, contractTemplateId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (take != null) {
            _queryParams["take"] = take.toString();
        }

        if (contractAddress != null) {
            _queryParams["contractAddress"] = contractAddress;
        }

        if (network != null) {
            _queryParams["network"] = network;
        }

        if (contractTemplateId != null) {
            _queryParams["contractTemplateId"] = contractTemplateId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                "api/v1/deployed-contracts",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.PaginatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/deployed-contracts.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific deployed contract
     *
     * @param {string} contractId - Deployed contract ID
     * @param {DeployedContracts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedContracts.getDeployedContract("contractId")
     */
    public getDeployedContract(
        contractId: string,
        requestOptions?: DeployedContracts.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getDeployedContract(contractId, requestOptions));
    }

    private async __getDeployedContract(
        contractId: string,
        requestOptions?: DeployedContracts.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/deployed-contracts/${encodeURIComponent(contractId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/deployed-contracts/{contractId}.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a deployed contract by network and address
     *
     * @param {string} network - Blockchain network
     * @param {string} contractAddress - Contract address
     * @param {DeployedContracts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedContracts.getDeployedContractByAddress("network", "contractAddress")
     */
    public getDeployedContractByAddress(
        network: string,
        contractAddress: string,
        requestOptions?: DeployedContracts.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getDeployedContractByAddress(network, contractAddress, requestOptions),
        );
    }

    private async __getDeployedContractByAddress(
        network: string,
        contractAddress: string,
        requestOptions?: DeployedContracts.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/deployed-contracts/${encodeURIComponent(network)}/${encodeURIComponent(contractAddress)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/deployed-contracts/{network}/{contractAddress}.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Fetch ABI for a deployed contract
     *
     * @param {OumlaSdkApi.FetchContractAbiRequest} request
     * @param {DeployedContracts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedContracts.fetchContractAbi({
     *         network: "network",
     *         contractAddress: "contractAddress"
     *     })
     */
    public fetchContractAbi(
        request: OumlaSdkApi.FetchContractAbiRequest,
        requestOptions?: DeployedContracts.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__fetchContractAbi(request, requestOptions));
    }

    private async __fetchContractAbi(
        request: OumlaSdkApi.FetchContractAbiRequest,
        requestOptions?: DeployedContracts.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                "api/v1/deployed-contracts/fetch-abi",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/deployed-contracts/fetch-abi.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Add ABI for a deployed contract
     *
     * @param {OumlaSdkApi.AddContractAbiRequest} request
     * @param {DeployedContracts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedContracts.addContractAbi({
     *         network: "network",
     *         contractAddress: "contractAddress",
     *         name: "name",
     *         abi: [{
     *                 "key": "value"
     *             }]
     *     })
     */
    public addContractAbi(
        request: OumlaSdkApi.AddContractAbiRequest,
        requestOptions?: DeployedContracts.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__addContractAbi(request, requestOptions));
    }

    private async __addContractAbi(
        request: OumlaSdkApi.AddContractAbiRequest,
        requestOptions?: DeployedContracts.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                "api/v1/deployed-contracts/add-abi",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/deployed-contracts/add-abi.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
