// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as OumlaSdkApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace ContractInteractions {
    export interface Options {
        environment?: core.Supplier<environments.OumlaSdkApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey?: string;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

/**
 * Smart contract interaction operations
 */
export class ContractInteractions {
    protected readonly _options: ContractInteractions.Options;

    constructor(_options: ContractInteractions.Options) {
        this._options = _options;
    }

    /**
     * Retrieve available functions for a deployed contract
     *
     * @param {string} network - Blockchain network
     * @param {string} contractAddress - Contract address
     * @param {ContractInteractions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contractInteractions.getContractFunctions("network", "contractAddress")
     */
    public getContractFunctions(
        network: string,
        contractAddress: string,
        requestOptions?: ContractInteractions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getContractFunctions(network, contractAddress, requestOptions),
        );
    }

    private async __getContractFunctions(
        network: string,
        contractAddress: string,
        requestOptions?: ContractInteractions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/contract-interactions/network/${encodeURIComponent(network)}/contract-address/${encodeURIComponent(contractAddress)}/functions`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/contract-interactions/network/{network}/contract-address/{contractAddress}/functions.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Call a read function on a deployed contract
     *
     * @param {string} network - Blockchain network
     * @param {string} contractAddress - Contract address
     * @param {OumlaSdkApi.ReadFunctionRequest} request
     * @param {ContractInteractions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contractInteractions.callReadFunction("network", "contractAddress", {
     *         abiFunction: {
     *             name: "name",
     *             inputs: [{}],
     *             outputs: [{}],
     *             type: "type"
     *         }
     *     })
     */
    public callReadFunction(
        network: string,
        contractAddress: string,
        request: OumlaSdkApi.ReadFunctionRequest,
        requestOptions?: ContractInteractions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__callReadFunction(network, contractAddress, request, requestOptions),
        );
    }

    private async __callReadFunction(
        network: string,
        contractAddress: string,
        request: OumlaSdkApi.ReadFunctionRequest,
        requestOptions?: ContractInteractions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/contract-interactions/network/${encodeURIComponent(network)}/contract-address/${encodeURIComponent(contractAddress)}/functions/read`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/contract-interactions/network/{network}/contract-address/{contractAddress}/functions/read.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Call a write function on a deployed contract
     *
     * @param {string} network - Blockchain network
     * @param {string} contractAddress - Contract address
     * @param {OumlaSdkApi.WriteFunctionRequest} request
     * @param {ContractInteractions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contractInteractions.callWriteFunction("network", "contractAddress", {
     *         addressId: "addressId",
     *         clientShare: "clientShare",
     *         abiFunction: {
     *             name: "name",
     *             inputs: [{}],
     *             outputs: [{}],
     *             type: "type"
     *         }
     *     })
     */
    public callWriteFunction(
        network: string,
        contractAddress: string,
        request: OumlaSdkApi.WriteFunctionRequest,
        requestOptions?: ContractInteractions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__callWriteFunction(network, contractAddress, request, requestOptions),
        );
    }

    private async __callWriteFunction(
        network: string,
        contractAddress: string,
        request: OumlaSdkApi.WriteFunctionRequest,
        requestOptions?: ContractInteractions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/contract-interactions/network/${encodeURIComponent(network)}/contract-address/${encodeURIComponent(contractAddress)}/functions/write`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/contract-interactions/network/{network}/contract-address/{contractAddress}/functions/write.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve transaction receipt for a specific transaction
     *
     * @param {string} network - Blockchain network
     * @param {string} txId - Transaction ID
     * @param {ContractInteractions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contractInteractions.getTransactionReceipt("network", "txId")
     */
    public getTransactionReceipt(
        network: string,
        txId: string,
        requestOptions?: ContractInteractions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTransactionReceipt(network, txId, requestOptions));
    }

    private async __getTransactionReceipt(
        network: string,
        txId: string,
        requestOptions?: ContractInteractions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/contract-interactions/network/${encodeURIComponent(network)}/tx/${encodeURIComponent(txId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/contract-interactions/network/{network}/tx/{txId}.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
