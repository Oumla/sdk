// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as OumlaSdkApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Withdrawals {
    export interface Options {
        environment?: core.Supplier<environments.OumlaSdkApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey?: string;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

/**
 * Withdrawal operations
 */
export class Withdrawals {
    protected readonly _options: Withdrawals.Options;

    constructor(_options: Withdrawals.Options) {
        this._options = _options;
    }

    /**
     * Create a new withdrawal request
     *
     * @param {OumlaSdkApi.CreateWithdrawalRequest} request
     * @param {Withdrawals.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.withdrawals.createWithdrawal({
     *         to: "to",
     *         amount: "amount",
     *         from: ["from"],
     *         network: "BTC",
     *         clientShare: "clientShare"
     *     })
     */
    public createWithdrawal(
        request: OumlaSdkApi.CreateWithdrawalRequest,
        requestOptions?: Withdrawals.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createWithdrawal(request, requestOptions));
    }

    private async __createWithdrawal(
        request: OumlaSdkApi.CreateWithdrawalRequest,
        requestOptions?: Withdrawals.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.SuccessResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                "api/v1/withdraw",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError("Timeout exceeded when calling POST /api/v1/withdraw.");
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
