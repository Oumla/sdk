// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as OumlaSdkApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Transactions {
    export interface Options {
        environment?: core.Supplier<environments.OumlaSdkApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-sdk-version header */
        sdkVersion?: "1.0.0";
        /** Override the x-api-key header */
        apiKey?: string;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

/**
 * Transaction history and tracking
 */
export class Transactions {
    protected readonly _options: Transactions.Options;

    constructor(_options: Transactions.Options) {
        this._options = _options;
    }

    /**
     * Retrieve transactions for a specific address
     *
     * @param {string} address - Blockchain address
     * @param {OumlaSdkApi.GetTransactionsByAddressRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transactions.getTransactionsByAddress("address", {
     *         skip: 1,
     *         take: 1
     *     })
     */
    public getTransactionsByAddress(
        address: string,
        request: OumlaSdkApi.GetTransactionsByAddressRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.PaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTransactionsByAddress(address, request, requestOptions));
    }

    private async __getTransactionsByAddress(
        address: string,
        request: OumlaSdkApi.GetTransactionsByAddressRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.PaginatedResponse>> {
        const { skip, take } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (take != null) {
            _queryParams["take"] = take.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/transactions/address/${encodeURIComponent(address)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.PaginatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/transactions/address/{address}.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve transactions for a specific wallet
     *
     * @param {string} miniWalletId - Mini wallet ID
     * @param {OumlaSdkApi.GetTransactionsByWalletRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transactions.getTransactionsByWallet("miniWalletId", {
     *         skip: 1,
     *         take: 1
     *     })
     */
    public getTransactionsByWallet(
        miniWalletId: string,
        request: OumlaSdkApi.GetTransactionsByWalletRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.PaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getTransactionsByWallet(miniWalletId, request, requestOptions),
        );
    }

    private async __getTransactionsByWallet(
        miniWalletId: string,
        request: OumlaSdkApi.GetTransactionsByWalletRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.PaginatedResponse>> {
        const { skip, take } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (take != null) {
            _queryParams["take"] = take.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/transactions/wallet/${encodeURIComponent(miniWalletId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.PaginatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/transactions/wallet/{miniWalletId}.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve transactions for the organization
     *
     * @param {OumlaSdkApi.GetOrganizationTransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transactions.getOrganizationTransactions({
     *         skip: 1,
     *         take: 1
     *     })
     */
    public getOrganizationTransactions(
        request: OumlaSdkApi.GetOrganizationTransactionsRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.PaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getOrganizationTransactions(request, requestOptions));
    }

    private async __getOrganizationTransactions(
        request: OumlaSdkApi.GetOrganizationTransactionsRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.PaginatedResponse>> {
        const { skip, take } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (take != null) {
            _queryParams["take"] = take.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                "api/v1/transactions/organization",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.PaginatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/transactions/organization.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve transactions for a specific profile
     *
     * @param {string} reference - Profile reference
     * @param {OumlaSdkApi.GetProfileTransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transactions.getProfileTransactions("reference", {
     *         skip: 1,
     *         take: 1
     *     })
     */
    public getProfileTransactions(
        reference: string,
        request: OumlaSdkApi.GetProfileTransactionsRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OumlaSdkApi.PaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getProfileTransactions(reference, request, requestOptions));
    }

    private async __getProfileTransactions(
        reference: string,
        request: OumlaSdkApi.GetProfileTransactionsRequest = {},
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OumlaSdkApi.PaginatedResponse>> {
        const { skip, take } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (take != null) {
            _queryParams["take"] = take.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-sdk-version": requestOptions?.sdkVersion ?? "1.0.0",
                "x-api-key": requestOptions?.apiKey ?? this._options?.apiKey,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OumlaSdkApiEnvironment.Production,
                `api/v1/transactions/profile/${encodeURIComponent(reference)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OumlaSdkApi.PaginatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OumlaSdkApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OumlaSdkApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OumlaSdkApiTimeoutError(
                    "Timeout exceeded when calling GET /api/v1/transactions/profile/{reference}.",
                );
            case "unknown":
                throw new errors.OumlaSdkApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
